#!/usr/bin/env python3
#
# SystemDock: tool to manage Docker containers as SystemD services
# Author: Roman Pavlyuk <roman.pavlyuk@gmail.com>

_VERSION="0.2.8"

# import modules used here -- sys is a very standard one
import sys, argparse, logging
import os, shutil, errno, yaml

try:
    from yaml import CLoader as Loader, CDumper as Dumper
except ImportError:
    from yaml import Loader, Dumper

import fileinput
import datetime
from time import sleep
import subprocess
import random

from argparse import ArgumentError

import docker

# Create empty configuration
# See also https://docker-py.readthedocs.io/en/stable/containers.html#docker.models.containers.ContainerCollection.run for more details on the settings
def make_profile_config(args):
    # Create new config
    config = dict(
       container = args.docker,             # Container image to use
       name = args.name,                    # Container name
       created = datetime.datetime.now(),   # Timestamp when the configuration is created
       ports = dict(),                      # TCP/UDP port mapping
       volumes = dict(),                    # Docker volumes
       privileged = False,                  # Running container in privileged mode
       tty = False,                         # Enable TTY
       working_dir = "/root",               # Working directory
       command = dict(                      # Commands to be executed before and after launching the container
           host = dict(
               pre = "",
               post = ""
           ),
           container = dict(
               post = ""
           )
           ),
       network_mode = 'bridge',             # Networking mode
       environment = dict(),                # Environment variables
       devices = list(),                    # Device mapping
       device_requests = list(),            # Expose host resources such as GPUs to the container, as a list
       mac_address = None,                  # Mac Address
       restart_policy = dict(),             # Restart policy
       remove = False,                      # Remove container after shutting down
       keep_alive = False,                  # Restart container if it has gone unexpectedly
       tmpfs = dict(),                      # Temporary filesystems to mount
       security_opt = list(),               # Custom labels for MLS systems, such as SELinux
       cgroupns = "private"                 # Override the default cgroup namespace mode for the container.
    )

    return config

# Read configuration
def parse_config(args, loglevel, config_file='/etc/systemdock/config.yaml'):
    
    # Check if file exists
    if not os.path.isfile(config_file):
        logging.error("Oh nooo! The configuration file " + config_file + " cannot be found :(")
        raise FileNotFoundError(errno.ENOENT, os.strerror(errno.ENOENT), config_file)

    # Read the configuration
    logging.info("Loading basic configuration from " + config_file)
    try:
        with open(config_file, 'r') as ymlfile:
            cfg = yaml.load(ymlfile, Loader=Loader)
        logging.info("Configuration from file " + config_file + " loaded successfully. Method #1.")
    except Exception as e:
        logging.debug("Was unable to load/parse YAML config " + config_file + " using Loader. Let's try old method.")
        with open(config_file, 'r') as ymlfile:
            cfg = yaml.load(ymlfile)
        logging.info("Configuration from file " + config_file + " loaded successfully. Method #2.")

    return cfg

# Add new service
def add_service(args, cfg):

    # Check if the arguments are set
    if args.docker is None:
        logging.error("Missing command-line argument: --docker")
        raise ArgumentError(args.docker, "Missing Docker container name")

    # Make sure that "name" is not missing
    if args.name is None:
        logging.error("Missing command-line argument: -n/--name")
        raise ArgumentError(args.docker, "Missing profile name")

    # Say hello
    logging.info("Adding new service: " + args.name)

    # Check if .d directory exists and we can write into it
    if not os.path.isdir(cfg['path']['services']):
        if args.force:
            logging.warning("Directory " + cfg['path']['services'] + " doesn't exists but we will create it now")
            os.makedirs(name=cfg['path']['services'], exist_ok=True)
        else:
            logging.error("Services' configuration directory doesn't exist!")
            raise FileNotFoundError(errno.ENOENT, os.strerror(errno.ENOENT), cfg['path']['services'])

    # Check if profile already exists
    if os.path.isdir(cfg['path']['services'] + "/" + args.name):
        if args.force:
            logging.warning("Profile directory " + cfg['path']['services'] + "/" + args.name + " exists but will be re-created because force mode is on")
            shutil.rmtree(cfg['path']['services'] + "/" + args.name)
        else:
            logging.error("Service profile " + cfg['path']['services'] + "/" + args.name + " already exists!")
            raise RuntimeError("Service profile " + cfg['path']['services'] + "/" + args.name + " already exists! Enable force mode (-f) or remove the service first.")

    # Check if template exists
    if not os.path.isfile(cfg['path']['template']):
        logging.error("Unable to find the service template!")
        raise FileNotFoundError(errno.ENOENT, os.strerror(errno.ENOENT), cfg['path']['template'])

    # Create service profile directory
    os.makedirs(name=cfg['path']['services'] + "/" + args.name, exist_ok=False)

    # Copy template as a service file
    service_file = cfg['path']['services'] + "/" + args.name + "/systemdock-" + args.name + ".service" 
    systemd_file = cfg['path']['systemd'] + "/systemdock-" + args.name + ".service"
    shutil.copy(src=cfg['path']['template'], dst=service_file)

    # Replace __NAME__ with real name in the just copied template
    with fileinput.FileInput(service_file, inplace=True, backup='.bak') as file:
        for line in file:
            print(line.replace("__NAME__", args.name), end='')

    # Create symbolic link to systemd directory so the service will be available to the systemd daemon
    if os.path.isfile(systemd_file):
        if args.force:
            logging.warning("Symlink to service file '" + systemd_file + "' exists. Will be removed and created again")
            os.unlink(systemd_file)
        else:
            raise RuntimeError("Symlink to service file '" + systemd_file + "' exists. Enable force mode (-f) or remove the service first.")
    # Now, let's create it
    logging.info("Creating symlink: [" + service_file + "] to [" + systemd_file + "]")
    os.symlink(src=service_file, dst=systemd_file)

    # Create configuration file
    config = make_profile_config(args)
    with open(cfg['path']['services'] + "/" + args.name + "/config.yml", 'w') as outfile:
        yaml.dump(config, outfile, default_flow_style=False)
        logging.info("Wrote config " + cfg['path']['services'] + "/" + args.name + "/config.yml")

    # return True is nothing happens
    return True

#
# Remove the service
#
def remove_service(args, cfg):

    # Make sure that "name" is not missing
    if args.name is None:
        logging.error("Missing command-line argument: -n/--name")
        raise ArgumentError(args.docker, "Missing profile name")

    # Say hello
    logging.info("Removing service: " + args.name)

    # Check if directory exists
    if not os.path.isdir(cfg['path']['services'] + "/" + args.name):
        logging.error("Service [" + args.name + "] doesn't exists: profile directory missing")
        return False

    # remove the symlink
    systemd_file = cfg['path']['systemd'] + "/systemdock-" + args.name + ".service"
    os.unlink(systemd_file)

    # Remove directory
    shutil.rmtree(cfg['path']['services'] + "/" + args.name)

    logging.info("Removed service " + args.name)

    # if nothing happens -- return True
    return True


#
# Start Service
#
def start_service(args, cfg):

    # Make sure that "name" is not missing
    if args.name is None:
        logging.error("Missing command-line argument: -n/--name")
        raise ArgumentError(args.docker, "Missing profile name")

    # Dynamically update logging format with the container name
    container_name = args.name
    for handler in logging.root.handlers:
        handler.setFormatter(logging.Formatter(f"[{container_name}] %(levelname)s: %(message)s"))

    # Say hello
    if args.action == 'start':
        logging.info("Starting service " + args.name)
    else:
        logging.info("Stopping service " + args.name)

    # Check if directory exists
    if not os.path.isdir(os.path.join(cfg['path']['services'], args.name)):
        logging.error("Service [" + args.name + "] doesn't exists: profile directory missing")
        return False

    # Read container configuration
    config_file = os.path.join(cfg['path']['services'], args.name, "config.yml")
    # First, check if file exists
    if not os.path.isfile(config_file):
        logging.error("Configuration file " + config_file + " cannot be found :(")
        raise FileNotFoundError(errno.ENOENT, os.strerror(errno.ENOENT), config_file)

    # Read the configuration
    logging.info("Loading profile configuration from " + config_file)
    with open(config_file, 'r') as ymlfile:
        config = yaml.load(ymlfile, Loader=Loader)

    ### Process optional settings and assign/correct default values

    # Correct defaults
    if not 'mac_address' in config:
        config['mac_address'] = "02:42:%02x:%02x:%02x:%02x" % (
          random.randint(0, 255),
          random.randint(0, 255),
          random.randint(0, 255),
          random.randint(0, 255)
        )
    # check if devices are provided in the config
    if not 'devices' in config:
        config['devices'] = list()

    # adjust device requests (config['device_requests']) to default value if not in the config
    if not 'device_requests' in config:
        config['device_requests'] = list()
    else:
        logging.info("Found device_requests:\n" + str(config['device_requests']))
        dr_list = list()
        for dr_item in config['device_requests']:
            dr_object = docker.types.DeviceRequest()
            if 'Driver' in dr_item:
                dr_object['Driver'] = dr_item['Driver']
            if 'Count' in dr_item:
                dr_object['Count'] = dr_item['Count']
            if 'DeviceIDs' in dr_item:
                dr_object['DeviceIDs'] = dr_item['DeviceIDs']
            if 'Capabilities' in dr_item:
                dr_object['Capabilities'] = dr_item['Capabilities']
            if 'Options' in dr_item:
                dr_object['Options'] = dr_item['Options']
            dr_list.append(dr_object)
        # assign re-built device requests list to the config
        config['device_requests'] = dr_list
        logging.info("Re-built device_requests list:\n" + str(config['device_requests']))

    # the same for restart_policy -- check if there's restart policy provided
    if not 'restart_policy' in config:
        config['restart_policy'] = dict()

    # check if 'restart' option is in the config
    if not 'remove' in config:
        config['remove'] = False

    # check if 'keep_alive' option is in the config
    if not 'keep_alive' in config:
        config['keep_alive'] = False

    # check if tmpfs mounts were specified
    if not 'tmpfs' in config:
        config['tmpfs'] = dict()

    # check if security options were provided
    if not 'security_opt' in config:
        config['security_opt'] = list()

    # set default cgroupns
    if not 'cgroupns' in config:
        config['cgroupns'] = "private"

    ### Now, let's try to start it
    client = docker.from_env()

    # Let's try to stop / kill & remove the previous container first
    try:
        logging.info("Check for running instance of " + config['container'])
        container = client.containers.get(args.name)
        container.remove(force=True, v=True)
        logging.info("Container " + args.name + " was found running and is now stopped")
    except docker.errors.NotFound:
        logging.warning("Container " + args.name + " wasn't found running")


    # IF action is 'start' than the new container will be started. If not -- the block below will be skipped and we are left with killed/stopped and remmoved container which is a perfect STOP action.
    if args.action == 'start':

        # Pull the new image
        logging.info("Pulling container " + config['container'] + " ...")
        image = client.images.pull(config['container'])
        logging.info("Pulling complete!")

        # Process pre-start command on host os
        if 'command' in config:
            logging.debug("Found command block in container configuration")
            if 'host' in config['command']:
                logging.debug("Found host commands block in container configuration")
                if 'pre' in config['command']['host']:
                    logging.info("Executing pre-start command on host OS: " + config['command']['host']['pre'])
                    os.system(config['command']['host']['pre'])
            else:
                logging.info("Host commands not found in container configuration")

        # Fire it off!
        logging.info("Starting container " + args.name + "...")
        if config['network_mode'] == 'host':
            container = client.containers.run(
                    config['container'],
                    detach=True,
                    name=args.name,
                    hostname=args.name,
                    ports=config['ports'],
                    volumes=config['volumes'],
                    privileged=config['privileged'],
                    tty=config['tty'],
                    working_dir=config['working_dir'],
                    environment=config['environment'],
                    network_mode=config['network_mode'],
        	  	    devices=config['devices'],
                    device_requests=config['device_requests'],
                    restart_policy = config['restart_policy'],
                    remove = config['remove'],
                    tmpfs = config['tmpfs'],
                    security_opt = config['security_opt'],
                    cgroupns = config['cgroupns']
                )
        else:
                    container = client.containers.run(
                    config['container'],
                    detach=True,
                    name=args.name,
                    hostname=args.name,
                    ports=config['ports'],
                    volumes=config['volumes'],
                    privileged=config['privileged'],
                    tty=config['tty'],
                    working_dir=config['working_dir'],
                    environment=config['environment'],
                    network_mode=config['network_mode'],
                    devices=config['devices'],
                    device_requests=config['device_requests'],
                    mac_address=config['mac_address'],
                    restart_policy = config['restart_policy'],
                    remove = config['remove'],
                    tmpfs = config['tmpfs'],
                    security_opt = config['security_opt'],
                    cgroupns = config['cgroupns']
                )
        logging.info("Container " + args.name + " started!")

        # Process commands section (post-start commands in container config)
        if 'command' in config:
            logging.debug("Found command block in container configuration")
            if 'host' in config['command']:
                logging.debug("Found host commands block in container configuration")
                if 'post' in config['command']['host']:
                    logging.info("Executing post-start command on host OS: " + config['command']['host']['post'])
                    os.system(config['command']['host']['post'])
            else:
                logging.info("Host commands not found in container configuration")

            if 'container' in config['command']:
                logging.debug("Found container commands block in container configuration")
                if 'post' in config['command']['container']:
                    logging.debug("Found container post-start command in the configuration")
                    logging.info("Executing post-start command on container: " + config['command']['container']['post'])
                    exit_code, output = container.exec_run(config['command']['container']['post'], tty=config['tty'], privileged=config['privileged'], environment=config['environment'])
                    logging.info("Command returned code {} with output {}".format(exit_code, output))

                
        else:
            logging.info("Command block not found in container configuration")

        # Wait for container to start
        logging.info("Waiting for container to start ...")
        # check if 'start_timeout' option is in the config
        if not 'container' in cfg or not 'start_timeout' in cfg['container']:
            cfg['container']['start_timeout'] = 120
        check_count = 0
        while True:
            # get latest attributes from Docker
            container.reload()
            # check status
            c_status = container.status
            check_count+=1
            logging.debug("Container status: {}".format(c_status))

            if container.status == 'running':
                logging.info("Container is now running!")
                break

            if check_count > cfg['container']['start_timeout']:
                logging.error("Unable to get container running within {} seconds".format(cfg['container']['start_timeout']))
                return False
            # wait for a moment
            sleep(1)


        # Hold the control process open
        # So, we will read the logs over and over
        # Also, let's start counting the times when cycle was run into exception.
        # This is to prevent the program into running in endless failure cycle. If certain threshold is passed -- the container is set for a restart. 
        exc_count = 0
        while True:
            try:
                # check status
                container.reload()
                c_status = container.status
                logging.debug("Container status: {}".format(c_status))

                # Reset the exception counter: if made it to the log output -- we assume that container is stable
                exc_count = 0
                logging.debug("Resetting exception counter. Last value: {}".format(exc_count))

                # print logs
                for line in container.logs(follow=True, stdout=True, stderr=True, stream=True):
                    
                    # some cleanup
                    line_str = str(line, encoding = 'utf-8')
                    line_str.strip()
                    line_str.replace("b'", "")
                    line_str.replace("\n'", "")

                    # print line
                    logging.info(line_str)

                    # If container has found gone and keep_alive is enabled then we will try to recover it
                    container.reload()
                    if container.status != 'running' and  config['keep_alive']:
                        logging.warning("Container is not running and keep_alive is enabled. Will try to recover it!")
                        start_service(args, cfg)

            except Exception as err:
                # increase exception counter
                exc_count = exc_count + 1
                # No one cares
                logging.error("Got error when running the container: {}".format(str(err)))
                logging.exception("Unexpected exception")
                # check if there were too many exceptions
                if not 'runtime_exception_limit' in cfg['container']:
                    runtime_exception_limit = 32
                else:
                    runtime_exception_limit = cfg['container']['runtime_exception_limit']
                if exc_count > runtime_exception_limit:
                    # End container management process with negative result and let systemd do the fault-tolerance action(s)
                    return False

    # if nothing happened -- return TRUE
    return True

#
# Stop the service
#
def stop_service(args, cfg):

    # the idea is the following: since we kills the container before starting it (the logic is already in 'start_service' function,
    # so then we can start go up killing the container and not to proceed with 'start' action furhter
    args.action = "stop"
    return start_service(args, cfg)


#
# List services managed by systemdock
#
def list_service(args, cfg):

    # Let's check if user wants to see all profiles or details of the specified one
    if args.name is None:
        logging.info("List of all services managed by SystemDock")
        list_all = True
    else:
        logging.info("Detailed information on service '%s'" % args.name)
        list_all = False

    # Proceed with either listing or showing the details
    if list_all:

        # Get profile directories list
        profile_dirs = os.listdir(cfg['path']['services'])

        # Print the list of profiles
        for p_dir in profile_dirs:
            # check if entry is really a directory
            if not os.path.isdir(os.path.join(cfg['path']['services'], p_dir)):
                logging.debug("%s is not a directory" % os.path.join(cfg['path']['services'], p_dir))
                continue
            # check if the folder contains profile config
            if not os.path.isfile(os.path.join(cfg['path']['services'], p_dir, "config.yml")):
                logging.debug("Folder %s doesn't contain profile configuration" % os.path.join(cfg['path']['services'], p_dir))
                continue

            # now, let's find the service information
            service = "NONE"
            service_state = "INNACTIVE"
            service_enabled = "DISABLED"
            for f in os.listdir(os.path.join(cfg['path']['services'], p_dir)):
                if f.endswith(".service"):
                    service = f
                    break
            if not service == 'NONE':
                if is_service_active(service):
                    service_state = "ACTIVE"
                if is_service_enabled(service):
                    service_enabled = "ENABLED"

            # Print the information
            print(p_dir + " | " + service + " | " + service_state + " | " + service_enabled)

    else:
        # let's show the details

        # let's make the profile dir path
        p_dir = os.path.join(cfg['path']['services'], args.name)

        if not os.path.exists(p_dir):
            logging.error("Profile not found: %s" % args.name)
            return False

        # Read container configuration
        config_file = os.path.join(cfg['path']['services'], args.name, "config.yml")
        # First, check if file exists
        if not os.path.isfile(config_file):
            logging.error("Configuration file " + config_file + " cannot be found. That's sad...")
            raise FileNotFoundError(errno.ENOENT, os.strerror(errno.ENOENT), config_file)

        # Read the configuration
        logging.debug("Loading profile configuration from " + config_file)
        with open(config_file, 'r') as ymlfile:
            config = yaml.load(ymlfile)

        # now, let's find the service information
        service = "NONE"
        service_state = "INNACTIVE"
        service_enabled = "DISABLED"
        for f in os.listdir(os.path.join(cfg['path']['services'], p_dir)):
            if f.endswith(".service"):
                service = f
                break
        if not service == 'NONE':
            if is_service_active(service):
                service_state = "ACTIVE (RUNNING)"
            if is_service_enabled(service):
                service_enabled = "ENABLED"

        # Okay, now let's print all the information:
        print("Profile name: %s" % args.name)
        print("SystemD Service: %s" % service)
        print("SystemD Service state: %s" % service_state)
        print("SystemD Service mode: %s" % service_enabled)
        print("Docker container: %s" % config['container'])
        print("Port forwarding: %s" % config['ports'])
        print("Volumes: %s" % config['volumes'])
        print("Commands: %s" % config['command'])

    # return True if nothing happens
    return True

#
# Check if SystemD service is running
#
def is_service_active(service):
    cmd = '/bin/systemctl status %s' % service
    proc = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
    stdout = proc.communicate()[0].decode("utf-8")
    stdout_list = stdout.split('\n')
    for line in stdout_list:
        if 'Active:' in line:
            if '(running)' in line:
                return True
    return False

#
# Check if SystemD service is enabled
#
def is_service_enabled(service):
    cmd = '/bin/systemctl status %s' % service
    proc = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
    stdout = proc.communicate()[0].decode("utf-8")
    stdout_list = stdout.split('\n')
    for line in stdout_list:
        if 'Loaded:' in line:
            if '.service; enabled;' in line:
                return True
    return False

# Gather our code in a main() function
def main(args, loglevel):
  logging.basicConfig(format="%(levelname)s: %(message)s", level=loglevel)
  
  logging.info("SystemDock version " +  _VERSION)
  logging.info("More info here: https://github.com/rpavlyuk/systemdock")

  if args.force:
      logging.warning("Force mode is ON")

  # Loading the configuration
  cfg = parse_config(args, loglevel, args.config)

  # Main program code
  logging.info("SYSTEMDock Action: %s" % args.action)

  # Result
  res_status = True

  # Proceed with the action
  if args.action == 'add':
      res_status = add_service(args, cfg)
  elif args.action == 'remove':
      res_status = remove_service(args, cfg)
  elif args.action == 'start':
      res_status = start_service(args, cfg)
  elif args.action == 'stop':
      res_status = stop_service(args, cfg)
  elif args.action == 'list':
      res_status = list_service(args, cfg)

  if not res_status:
      logging.error("Exiting with code 1")
      exit(1)
 

 
# Standard boilerplate to call the main() function to begin
# the program.
if __name__ == '__main__':
  parser = argparse.ArgumentParser( 
          description = "SystemDock: tool to manage Docker containers as SystemD services",
          fromfile_prefix_chars = '@' )
  # Parameters
  parser.add_argument(
                      "-a",
                      "--action",
                      help = "Action the script has to perform",
                      choices=['add', 'remove', 'start', 'stop', 'list'],
                      required=True)
  parser.add_argument(
                      "-v",
                      "--verbose",
                      help="Increase output verbosity. NOTE: This option produces lots of information like API calls so beware when using it.",
                      action="store_true",
                      default=False)
  parser.add_argument(
                      "-f",
                      "--force",
                      help="Ignore minor errors, assume 'yes' when deleting and override in case of existing entities",
                      action="store_true")
  parser.add_argument(
                      "-c",
                      "--config",
                      help = "Path to main configuration file (e.g., config.yaml)",
                      required=False,
                      default='/etc/systemdock/config.yaml')
  parser.add_argument(
                      "-n",
                      "--name",
                      help = "Name of the service",
                      required=False)
  parser.add_argument(
                      "-d",
                      "--docker",
                      help = "Docker container name. For example, 'jenkins/jenkins:lts'",
                      required=False)

  args = parser.parse_args()
  
  # Setup logging
  if args.verbose:
    loglevel = logging.DEBUG
  else:
    loglevel = logging.INFO
  
  main(args, loglevel)
